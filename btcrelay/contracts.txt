Mar 30
./eth/eth -j -m on -v 9 -s <secret> -a 29d33c02a200937995e632c4597b4dca8e503978 -r poc-9.ethdev.com:30303
block 35525 is around the start of storing some headers

Mar 27
AZ
poc9 block 33807 has the ether transfer (13 wei)
block 33793 and nearby has the set up
contracts are at:
gRelayAddr = '0xb8e116ddf8b8d451e04c5733a96a853b9036e883';  // CPP
gExchangeContractAddr = '0x4d02a1132621fc80cd36eceeefaa11133ab842cd'; // CPP


ethereum.js fix128 branch was used, commit 2618bae

Mar 18
For using Go
may need to "rm -rf ~/.ethereum" and run "ethereum new account"

Note: password at the end of the unlock param
ethereum -mine=true -rpc=true -rpcport=8080 -unlock=32ad27653e4df5d81728d16d8e251fee34f53d30:password

Make sure to specify the same coinbase when using pyepm, eg:
pyepm -a 32ad27653e4df5d81728d16d8e251fee34f53d30 <yaml>

Watch out for tx failed (go-ethereum issue 519)

sendTransaction() callback isn't firing

May have to use my branch fork/fixWaitTx of pyepm, for deploys to
work (and not get stuck in Waiting for Transaction...)


Deployment order (don't forget to set the address for the yamls after testBulkDeploy):
testBulkDeploy.yaml
postDeployTests.yaml
btcEthDeploy.yaml
testRelayTx.yaml (can only run once since tx can only claim ether once)


For testing relayTx:
- each tx can only claim ether once
- need to change btcAddr and deploy the btcEth contract
- update the frontend's btcAddr and gExchangeContractAddr
- in browser frontend, make sure to use the correct txHash

For building Mist:
➜  go-ethereum git:(develop) ✗ source /opt/qt54/bin/qt54-env.sh
➜  go-ethereum git:(develop) ✗ godep go build -v ./cmd/mist


Mar 19
For using C++ eth CLI (497dff0)
Run "eth -j -m on" and note the address, eg
--- [ 14:02:10 | main ] Spawning eth
Address:
f52a423ecad0b6c70b5adf69edbe51b9db11c7c9

Then deploy with pyepm master branch commit 13e13e7 with string fixed
  if d != d.decode('string_escape'):
    definition[key][name][option][i] = d.decode('string_escape')
  else:
    print('@@@@ NOP')

pyepm -a f52a423ecad0b6c70b5adf69edbe51b9db11c7c9 <yaml>

Deploy is smoother (nothing like go-ethereum issue 519)

For using Alethzero
Ensure coinbase has more than 30,000 finney
(Use Special->Reserved Debug 1 for faster mining)



==

Notes during development (initially to keep track of address of contracts)

02f653a05dc68a7df9a74c8eb9a50a15e98bed6e is sampleContractA.py

To get data to paste in AZ:
from pyepm import api
api.abi_data('processTransaction', 'i', [42])
Block 2161 was the creation
Block 2162 stored 42 using pyepm above
Block 2178 was failed contract.transact().processTransaction(33).toString(10)
  it failed because the abi was using uint256 and it should be int256 since Serpent is now using signed ints


If there's an api.abi_data error, make sure that the 3rd param is a LIST.


btcrelay.py contract is:
d82829ef90ed0f0d1c3f8f9e82cb4e923b7ba24c
(Doesn't show up in Contracts pane perhaps https://github.com/ethereum/serpent/issues/62
and when you try to send a message to it, AZ says Destination not a contract)


Scenario1: storing (real) genesis and block1:
Here is the info on storing the genesis block:
>>> bstr = '0100000000000000000000000000000000000000000000000000000000000000000000003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a29ab5f49ffff001d1dac2b7c'
>>> bb = bstr.decode('hex')
>>> data = api.abi_data('storeBlockHeader','s', [bb])
>>> data
'0x91d0ded500000000000000000000000000000000000000000000000000000000000000500100000000000000000000000000000000000000000000000000000000000000000000003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a29ab5f49ffff001d1dac2b7c'

Verified genesis is stored at 0xa[genesisBlockHash]
Done in block3449

We would send 'data' to the contract, but it wasn't able to be created in AZ.


After storing the genesis, here's ABI data for storing block1:
>>> b1str = '010000006fe28c0ab6f1b372c1a6a246ae63f74f931e8365e15a089c68d6190000000000982051fd1e4ba744bbbe680e1fee14677ba1a3c3540bf7b1cdb606e857233e0e61bc6649ffff001d01e36299'
>>> api.abi_data('storeBlockHeader','s', [b1str.decode('hex')])
'0x91d0ded50000000000000000000000000000000000000000000000000000000000000050010000006fe28c0ab6f1b372c1a6a246ae63f74f931e8365e15a089c68d6190000000000982051fd1e4ba744bbbe680e1fee14677ba1a3c3540bf7b1cdb606e857233e0e61bc6649ffff001d01e36299'

Verified block1 is stored at 0xa[block1hash]
Done in block3450


Scenario2: testRelayTx

>>> api.abi_data('testingonlySetGenesis', 'i', [0x000000000002d01c1fccc21636b607dfd930d31d01c3a62104612a1719011250])
'0x3b880072000000000002d01c1fccc21636b607dfd930d31d01c3a62104612a1719011250'
Done in local chain, relay contract is 3432c7f5ca6552fca2f641575135578cb724eb1f

To get the abi for storing the headers, run python script/abiRelayTx.py

All 7 headers were added to local chain, ended on block31


Then we compiled btc-eth.py, pasted in AZ, mined it to get contract at:
1ddb229746359a5eb72317f9936411be1b589301   Note that this is the
exchange contract address and used in args below

Then abi for relayTx:
>>> types (from serpent mk_signature btcrelay.py and look for relayTx)
'siiaaii'
>>> args (from a print() inside btcrelay.py relayTx())
['0100000001032e38e9c0a84c6046d687d10556dcacc41d275ec55fc00779ac88fdf357a187000000008c493046022100c352d3dd993a981beba4a63ad15c209275ca9470abfcd57da93b58e4eb5dce82022100840792bc1f456062819f15d33ee7055cf7b5ee1af1ebcc6028d9cdb1c3af7748014104f46db5e9d61a9dc27b8d64ad23e7383a4e6ca164593c2527c038c0857eb67ee8e825dca65046b82c9331586c82e0fd1f633f25f87c161bc6f8a630121df2b3d3ffffffff0200e32321000000001976a914c398efa9c392ba6013c5e04ee729755ef7f58b3288ac000fe208010000001976a914948c765a6914d43f2a7ac177da2c2f6b52de3d7c88ac00000000', 115767921789412926100933682018446757625251444727920376795127517381710205878980L, 2, [63360798072827732011079001120771167228569304803927829804291675908297574083975L, 64314182592135631644571729974664332912373045195955364489612163419788843200073L], [1, 2], 1533267872647776902154320487930659211795065581998445848740226310L, '1ddb229746359a5eb72317f9936411be1b589301']
>>> api.abi_data('relayTx', types, args)
'0xdfeab41a000000000000000000000000000000000000000000000000000000000000020600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002fff2525b8931402dd09222c50775608f75787bd2b87e56995a7bdd30f79702c40000000000000000000000000000000000000000000000000000000000000002000000000003ba27aa200b1cecaad478d2b00432346c3f1f3986da1afd33e5060000000000000000000000001ddb229746359a5eb72317f9936411be1bc14f0db3df150123e6f3dbbf30f8b955a8249b62ac1d1ff16284aefa3d06d878e30899078ca1813be036a073bbf80b86cdddde1c96e9e9c99e9e3782df4ae4900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002'
Send this abi data to relay contract (3432c7f5ca6552fca2f641575135578cb724eb1f)

When done, check that address 948c765a6914d43f2a7ac177da2c2f6b52de3d7c (this was
the address in output[1] of the tx that was submitted to relayTx) has 13 wei.
(The tx submitted to relayTx is args[0] above.)


Since relayTx didn't seem to work, try testing verifyTx first.
>>> args[1:-1]
[115767921789412926100933682018446757625251444727920376795127517381710205878980L, 2, [63360798072827732011079001120771167228569304803927829804291675908297574083975L, 64314182592135631644571729974664332912373045195955364489612163419788843200073L], [1, 2], 1533267872647776902154320487930659211795065581998445848740226310L]
>>> types[1:-1]
'iiaai'
>>> api.abi_data('verifyTx', types[1:-1], args[1:-1])
'0x25979d000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002fff2525b8931402dd09222c50775608f75787bd2b87e56995a7bdd30f79702c40000000000000000000000000000000000000000000000000000000000000002000000000003ba27aa200b1cecaad478d2b00432346c3f1f3986da1afd33e5068c14f0db3df150123e6f3dbbf30f8b955a8249b62ac1d1ff16284aefa3d06d878e30899078ca1813be036a073bbf80b86cdddde1c96e9e9c99e9e3782df4ae4900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002'
This is in block36 of local chain.

For checking confirmations:
>>> txhash=1533267872647776902154320487930659211795065581998445848740226310L
>>> api.abi_data('within6Confirms','i', [txhash])
'0x3d73b705000000000003ba27aa200b1cecaad478d2b00432346c3f1f3986da1afd33e506'

>>> api.abi_data('inMainChain','i', [txhash])
'0xb041b285000000000003ba27aa200b1cecaad478d2b00432346c3f1f3986da1afd33e506'


>>> merkleargs
[115767921789412926100933682018446757625251444727920376795127517381710205878980L, 2, [63360798072827732011079001120771167228569304803927829804291675908297574083975L, 64314182592135631644571729974664332912373045195955364489612163419788843200073L], [1, 2]]
>>> api.abi_data('computeMerkle', 'iiaa', merkleargs)
'0x703e494800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002fff2525b8931402dd09222c50775608f75787bd2b87e56995a7bdd30f79702c400000000000000000000000000000000000000000000000000000000000000028c14f0db3df150123e6f3dbbf30f8b955a8249b62ac1d1ff16284aefa3d06d878e30899078ca1813be036a073bbf80b86cdddde1c96e9e9c99e9e3782df4ae4900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002'
The merkle is as expected: http://imgur.com/CvpStl4




Verifying the tx via curl works, returns 1:
curl -X POST --data '{"jsonrpc":"2.0","method":"eth_call","params":[{
"to": "0x3432c7f5ca6552fca2f641575135578cb724eb1f",
"data": "0x25979d000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002fff2525b8931402dd09222c50775608f75787bd2b87e56995a7bdd30f79702c40000000000000000000000000000000000000000000000000000000000000002000000000003ba27aa200b1cecaad478d2b00432346c3f1f3986da1afd33e5068c14f0db3df150123e6f3dbbf30f8b955a8249b62ac1d1ff16284aefa3d06d878e30899078ca1813be036a073bbf80b86cdddde1c96e9e9c99e9e3782df4ae4900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002",
"gas": "0x30d40",
"gasPrice": "0x01",
}],"id":1}' http://localhost:8080

{"id":1,"jsonrpc":"2.0","result":"0x0000000000000000000000000000000000000000000000000000000000000001"}


But it isn't working in ethereum.js so need to see what rpc request it makes...




Probably poc8:
46509d73e9d86ecffba01a13288b98366586c669 is sampleContractcallsA.py
sample msg to it:
00
0000000000000000000000000000000000000000000000000000000000000001
000000000000000000000000205215f022af4950618730bcfae161b28397bc41
000000000000000000000000000000000000000000000000000000000000000b

concat:
000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000205215f022af4950618730bcfae161b28397bc41000000000000000000000000000000000000000000000000000000000000000b



This was probably on poc7:
d91d87f8b485a028bc17c1d47c3703ff01483e14 is sampleContractB.py


01c64ba40b13ed3e43d7efebb748d5da7548ea7e is sampleContractC.py (reads 32nd char)
5d1e3a9efc03d0e625514ad41ce13cd8720970d8 is contractC that reads the 33rd char

block 15008 has the manual transact()

block 15025 int works



solo
block 15137 tx ebfe1 shows how 9998 gets stored
block 15138 shows the OOG trying to store 9997
block 15141 trying to store 'a' (97) in storage



sha256 documentation:
mystr = text("11111111111111111111111111111111")
  res = sha256(mystr:str)
  return(res)
[-53140752622162270260467659020085806305646383077295113839779940122544596587222L]
>>> -53140752622162270260467659020085806305646383077295113839779940122544596587222 % 2**256
62651336615153925163103325988602101547623601588345450199677643885368533052714L

which equals

>>> j = '3131313131313131313131313131313131313131313131313131313131313131'
>>> sha256(j.decode('hex'))
'8a83665f3798727f14f92ad0e6c99fdab08ee731d6cd644c131223fd2f4fed2a'
>>> 0x8a83665f3798727f14f92ad0e6c99fdab08ee731d6cd644c131223fd2f4fed2a
62651336615153925163103325988602101547623601588345450199677643885368533052714L

This is same:
mystr = text("11111111111111111111111111111111")
  save(self.buf[0], mystr, chars=32)

  myarr = load(self.buf[0], items=1)
  log(data=myarr)

  res = sha256(myarr, chars=32)
  return(res)
