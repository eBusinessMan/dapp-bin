

02f653a05dc68a7df9a74c8eb9a50a15e98bed6e is sampleContractA.py

To get data to paste in AZ:
from pyepm import api
api.abi_data('processTransfer', 'i', [42])
Block 2161 was the creation
Block 2162 stored 42 using pyepm above
Block 2178 was failed contract.transact().processTransfer(33).toString(10)
  it failed because the abi was using uint256 and it should be int256 since Serpent is now using signed ints


btcrelay.py contract is:
d82829ef90ed0f0d1c3f8f9e82cb4e923b7ba24c
(Doesn't show up in Contracts pane perhaps https://github.com/ethereum/serpent/issues/62
and when you try to send a message to it, AZ says Destination not a contract)

Here is the info on storing the genesis block:
>>> bstr = '0100000000000000000000000000000000000000000000000000000000000000000000003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a29ab5f49ffff001d1dac2b7c'
>>> bb = bstr.decode('hex')
>>> data = api.abi_data('storeBlockHeader','s', [bb])
>>> data
'0x91d0ded500000000000000000000000000000000000000000000000000000000000000500100000000000000000000000000000000000000000000000000000000000000000000003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a29ab5f49ffff001d1dac2b7c'

We would send 'data' to the contract, but it wasn't able to be created in AZ.






46509d73e9d86ecffba01a13288b98366586c669 is sampleContractcallsA.py
sample msg to it:
00
0000000000000000000000000000000000000000000000000000000000000001
000000000000000000000000205215f022af4950618730bcfae161b28397bc41
000000000000000000000000000000000000000000000000000000000000000b

concat:
000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000205215f022af4950618730bcfae161b28397bc41000000000000000000000000000000000000000000000000000000000000000b



d91d87f8b485a028bc17c1d47c3703ff01483e14 is sampleContractB.py


01c64ba40b13ed3e43d7efebb748d5da7548ea7e is sampleContractC.py (reads 32nd char)
5d1e3a9efc03d0e625514ad41ce13cd8720970d8 is contractC that reads the 33rd char

block 15008 has the manual transact()

block 15025 int works



solo
block 15137 tx ebfe1 shows how 9998 gets stored
block 15138 shows the OOG trying to store 9997
block 15141 trying to store 'a' (97) in storage



sha256 documentation:
mystr = text("11111111111111111111111111111111")
  res = sha256(mystr:str)
  return(res)
[-53140752622162270260467659020085806305646383077295113839779940122544596587222L]
>>> -53140752622162270260467659020085806305646383077295113839779940122544596587222 % 2**256
62651336615153925163103325988602101547623601588345450199677643885368533052714L

which equals

>>> j = '3131313131313131313131313131313131313131313131313131313131313131'
>>> sha256(j.decode('hex'))
'8a83665f3798727f14f92ad0e6c99fdab08ee731d6cd644c131223fd2f4fed2a'
>>> 0x8a83665f3798727f14f92ad0e6c99fdab08ee731d6cd644c131223fd2f4fed2a
62651336615153925163103325988602101547623601588345450199677643885368533052714L

This is same:
mystr = text("11111111111111111111111111111111")
  save(self.buf[0], mystr, chars=32)

  myarr = load(self.buf[0], items=1)
  log(data=myarr)

  res = sha256(myarr, chars=32)
  return(res)
